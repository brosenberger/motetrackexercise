/*
 * SimpleGLCanvas.java
 *
 * Created on 30. Juli 2008, 16:18
 */

package gui;

import javax.swing.event.ListSelectionEvent;
import com.sun.opengl.util.Animator;
import data.HistoryCollector;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.media.opengl.GLCanvas;
import javax.media.opengl.GLCapabilities;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.UIManager;
import javax.swing.WindowConstants;
import javax.swing.event.ListSelectionListener;
import misc.TagIdListModel;
import network.ServerDataReader;
import network.client.ReplayServerClient;

/**
 *
 * @author cylab
 * @author mbien
 */
public class MainFrame extends JFrame {

    static {
        // When using a GLCanvas, we have to set the Popup-Menues to be HeavyWeight,
        // so they display properly on top of the GLCanvas
        JPopupMenu.setDefaultLightWeightPopupEnabled(false);
    }
    
    private Animator animator;
    private GLRenderer renderer;
    private HistoryCollector historyCollector;
    private StartServerDialog startServerDialog;
    private ConnectToServerDialog connectToServerDialog;

    /** Creates new form MainFrame */
    public MainFrame() {
        ServerDataReader sdr = ReplayServerClient.startServer();//"020000136184");
        historyCollector = new HistoryCollector(sdr);
        startServerDialog = new StartServerDialog(this, true);
        connectToServerDialog = new ConnectToServerDialog(this, true);

        initComponents();

        
        tagIdList.addListSelectionListener(listSelectionListener);

        setTitle("Motion Tracking Application");

        renderer = new GLRenderer();
        canvas.addGLEventListener(renderer);
        animator = new Animator(canvas);

        // This is a workaround for the GLCanvas not adjusting its size, when the frame is resized.
        canvas.setMinimumSize(new Dimension());         
        
        this.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                // Run this on another thread than the AWT event queue to
                // make sure the call to Animator.stop() completes before
                // exiting
                new Thread(new Runnable() {

                    public void run() {
                        animator.stop();
                        System.exit(0);
                    }
                }).start();
            }
        });
    }

    @Override
    public void setVisible(boolean show){
        if(!show)
            animator.stop();
        super.setVisible(show);
        if(show)
            animator.start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        JLabel label = new JLabel();
        canvas = new GLCanvas(createGLCapabilites());
        historyCheckBox = new JCheckBox();
        beacon2dCheckBox = new JCheckBox();
        resetButton = new JButton();
        tagIdListScrollPane = new JScrollPane();
        tagIdList = new JList();
        jMenuBar1 = new JMenuBar();
        fileMenuItem = new JMenu();
        startServerItem = new JMenuItem();
        connectMenuItem = new JMenuItem();
        exitMenuItem = new JMenuItem();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        label.setText("Below you see a GLCanvas");

        historyCheckBox.setSelected(true);
        historyCheckBox.setText("draw history");
        historyCheckBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                historyCheckBoxActionPerformed(evt);
            }
        });

        beacon2dCheckBox.setSelected(true);
        beacon2dCheckBox.setText("draw 2D beacon");
        beacon2dCheckBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                beacon2dCheckBoxActionPerformed(evt);
            }
        });

        resetButton.setText("Reset View");
        resetButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        tagIdList.setModel(new TagIdListModel());
        tagIdListScrollPane.setViewportView(tagIdList);

        fileMenuItem.setText("File");

        startServerItem.setText("Start Server");
        startServerItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                startServerItemActionPerformed(evt);
            }
        });
        fileMenuItem.add(startServerItem);

        connectMenuItem.setText("Connect to Server");
        connectMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                connectMenuItemActionPerformed(evt);
            }
        });
        fileMenuItem.add(connectMenuItem);

        exitMenuItem.setAction(exitAction);
        exitMenuItem.setText("Exit");
        fileMenuItem.add(exitMenuItem);

        jMenuBar1.add(fileMenuItem);

        setJMenuBar(jMenuBar1);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(label)
                    .addComponent(tagIdListScrollPane, GroupLayout.PREFERRED_SIZE, 146, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(canvas, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(historyCheckBox)
                        .addPreferredGap(ComponentPlacement.UNRELATED)
                        .addComponent(beacon2dCheckBox)
                        .addPreferredGap(ComponentPlacement.RELATED, 282, Short.MAX_VALUE)
                        .addComponent(resetButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(label)
                    .addComponent(historyCheckBox)
                    .addComponent(beacon2dCheckBox)
                    .addComponent(resetButton))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(tagIdListScrollPane, GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
                    .addComponent(canvas, GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void historyCheckBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_historyCheckBoxActionPerformed
        renderer.setDrawHistory(historyCheckBox.isSelected());
    }//GEN-LAST:event_historyCheckBoxActionPerformed

    private void beacon2dCheckBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_beacon2dCheckBoxActionPerformed
        renderer.setDraw2dBeachon(beacon2dCheckBox.isSelected());
    }//GEN-LAST:event_beacon2dCheckBoxActionPerformed

    private void resetButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        renderer.reset();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void startServerItemActionPerformed(ActionEvent evt) {//GEN-FIRST:event_startServerItemActionPerformed
        startServerDialog.setLocationRelativeTo(this);
        startServerDialog.setVisible(true);
    }//GEN-LAST:event_startServerItemActionPerformed

    private void connectMenuItemActionPerformed(ActionEvent evt) {//GEN-FIRST:event_connectMenuItemActionPerformed
        connectToServerDialog.setLocationRelativeTo(this);
        connectToServerDialog.setVisible(true);
    }//GEN-LAST:event_connectMenuItemActionPerformed

    /**
     * Called from within initComponents().
     * hint: to customize the generated code choose 'Customize Code' in the contextmenu
     * of the selected UI Component you wish to cutomize in design mode.
     * @return Returns customized GLCapabilities.
     */
    private GLCapabilities createGLCapabilites() {
        
        GLCapabilities capabilities = new GLCapabilities();
        capabilities.setHardwareAccelerated(true);

        // try to enable 2x anti aliasing - should be supported on most hardware
        capabilities.setNumSamples(2);
        capabilities.setSampleBuffers(true);
        
        return capabilities;
    }
    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        // Run this in the AWT event thread to prevent deadlocks and race conditions
        EventQueue.invokeLater(new Runnable() {
            public void run() {

                // switch to system l&f for native font rendering etc.
                try{
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                }catch(Exception ex) {
                    Logger.getLogger(getClass().getName()).log(Level.INFO, "can not enable system look and feel", ex);
                }

                MainFrame frame = new MainFrame();

                frame.setVisible(true);
            }
        });
    }

    private Action exitAction = new AbstractAction("EXIT") {

        public void actionPerformed(ActionEvent e) {
            System.exit(0);
        }
    };

    private ListSelectionListener listSelectionListener = new ListSelectionListener() {

        public void valueChanged(ListSelectionEvent e) {
            tagIdList.getSelectedValues();
//            tagIdList.get
        }
    };


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JCheckBox beacon2dCheckBox;
    private GLCanvas canvas;
    private JMenuItem connectMenuItem;
    private JMenuItem exitMenuItem;
    private JMenu fileMenuItem;
    private JCheckBox historyCheckBox;
    private JMenuBar jMenuBar1;
    private JButton resetButton;
    private JMenuItem startServerItem;
    private JList tagIdList;
    private JScrollPane tagIdListScrollPane;
    // End of variables declaration//GEN-END:variables

}
