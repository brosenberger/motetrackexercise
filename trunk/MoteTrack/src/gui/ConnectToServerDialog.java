/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConnectToServerDialog.java
 *
 * Created on 13.11.2009, 01:53:06
 */

package gui;

import data.Position;
import data.SensorData;
import exceptions.ClientAlreadyExistsException;
import exceptions.IllegalTagIdFormatException;
import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.event.ListDataListener;
import misc.ServerLogger;
import misc.SimpleListModel;
import network.NormalizedServerDataReader;
import network.ServerDataReader;

/**
 *
 * @author tscheinecker
 */
public class ConnectToServerDialog extends javax.swing.JDialog {

    private SimpleListModel simpleListModel;
    private MoteTrackApp parent;

    /** Creates new form ConnectToServerDialog */
    public ConnectToServerDialog(MoteTrackApp parent, boolean modal) {
        super(parent, modal);
        simpleListModel = new SimpleListModel();
        this.parent = parent;
        initComponents();
        

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connectButton = new javax.swing.JButton();
        abortButton = new javax.swing.JButton();
        serverAddressTextField = new javax.swing.JTextField();
        replayLogLabel = new javax.swing.JLabel();
        tagIdListScrollPane = new javax.swing.JScrollPane();
        tagIdList = new javax.swing.JList();
        tagIdTextField = new javax.swing.JTextField();
        removeButton = new javax.swing.JButton();
        idLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        normalizeCheckBox = new javax.swing.JCheckBox();
        logCheckBox = new javax.swing.JCheckBox();
        pathTextField = new javax.swing.JTextField();
        pathLabel = new javax.swing.JLabel();
        filenameLabel = new javax.swing.JLabel();
        filenameTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Start Server");
        setAlwaysOnTop(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("connectDialog"); // NOI18N
        setResizable(false);

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        abortButton.setText("Abort");
        abortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abortButtonActionPerformed(evt);
            }
        });

        serverAddressTextField.setText("localhost:5000");
        serverAddressTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverAddressTextFieldActionPerformed(evt);
            }
        });

        replayLogLabel.setText("IP Address");

        tagIdList.setModel(simpleListModel);
        tagIdListScrollPane.setViewportView(tagIdList);

        removeButton.setText("-");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        idLabel.setText("IDs");

        addButton.setText("+");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        normalizeCheckBox.setText("normalize data");
        normalizeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalizeCheckBoxActionPerformed(evt);
            }
        });

        logCheckBox.setText("log data");
        logCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logCheckBoxActionPerformed(evt);
            }
        });

        pathTextField.setText("../MoteTrack/logs/");
        pathTextField.setEnabled(false);

        pathLabel.setText("Log Path");
        pathLabel.setEnabled(false);

        filenameLabel.setText("Filename");
        filenameLabel.setEnabled(false);

        filenameTextField.setText("<yy'.'MM'.'dd kk'-'mm'-'ss>.log");
        filenameTextField.setEnabled(false);

        browseButton.setText("Browse");
        browseButton.setEnabled(false);
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(replayLogLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tagIdTextField)
                                    .addComponent(tagIdListScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(addButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(removeButton))
                                    .addComponent(serverAddressTextField, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(53, 53, 53)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(logCheckBox)
                                            .addComponent(pathLabel)
                                            .addComponent(normalizeCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                                            .addComponent(pathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(52, 52, 52)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(filenameLabel)
                                            .addComponent(browseButton)
                                            .addComponent(filenameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(idLabel)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(connectButton)
                        .addGap(18, 18, 18)
                        .addComponent(abortButton)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {abortButton, connectButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(replayLogLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(serverAddressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(idLabel)
                        .addGap(6, 6, 6))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(normalizeCheckBox)
                        .addGap(23, 23, 23)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tagIdListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(tagIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(removeButton)
                            .addComponent(addButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(logCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pathLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filenameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filenameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectButton)
                    .addComponent(abortButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        String ids = simpleListModel.getListEntries().replaceAll("-", "");

        System.out.println(ids);
        String server = serverAddressTextField.getText();
        if (server.length() == 0) {
            JOptionPane.showMessageDialog(this, "You must provide a server address", "Server Address Missing", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String[] split = server.split(":");
        if (split.length != 2) {
            JOptionPane.showMessageDialog(this, "The server address format has to be:\n IP_Address:Port", "Invalid Server Address", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String address = split[0];

        try {
            int port = Integer.parseInt(split[1]);
            ServerDataReader client = new ServerDataReader(address, port, ids);
            if (normalizeCheckBox.isSelected()) {
                Position pos = new Position(0.15, 0.15, 0.15);
                NormalizedServerDataReader obs = new NormalizedServerDataReader(pos, 1);
                client.addObserver(obs);
            }

            if (logCheckBox.isSelected()) {
                // Append path seperator at end of path name
                String path = pathTextField.getText();
                char lastChar = path.charAt(path.length()-1);
                if (lastChar != '/' && lastChar != '\\') {
                    path = path+File.separatorChar;
                }

                String filename = path + formatFilename(filenameTextField.getText());

                ServerLogger logger = new ServerLogger(filename);
                client.addObserver(logger);
            }
            parent.connectToServer(client);
        } catch (ClientAlreadyExistsException e) {
            JOptionPane.showMessageDialog(this, "A client on this sever at this port already exists", "Cient Already Exists", JOptionPane.ERROR_MESSAGE);
            return;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "The Port has to be a number", "Invalid Port", JOptionPane.ERROR_MESSAGE);
            return;
        }

        dispose();
    }//GEN-LAST:event_connectButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        
        try {
            String tagId = SensorData.formatId(tagIdTextField.getText(), false);
            simpleListModel.addElement(tagId);
        } catch (IllegalTagIdFormatException e) {
            JOptionPane.showMessageDialog(this, "You entered an invalid Tag ID", "Invalid Tag ID", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        simpleListModel.removeElements(tagIdList.getSelectedIndices());
    }//GEN-LAST:event_removeButtonActionPerformed

    private void abortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abortButtonActionPerformed
        dispose();
    }//GEN-LAST:event_abortButtonActionPerformed

    private void serverAddressTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverAddressTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serverAddressTextFieldActionPerformed

    private void normalizeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalizeCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_normalizeCheckBoxActionPerformed

    private void logCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logCheckBoxActionPerformed
        boolean on = logCheckBox.isSelected();
        browseButton.setEnabled(on);
        pathLabel.setEnabled(on);
        pathTextField.setEnabled(on);
        filenameLabel.setEnabled(on);
        filenameTextField.setEnabled(on);
    }//GEN-LAST:event_logCheckBoxActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        String workdir = System.getProperty("user.dir");
        fc.setSelectedFile(new File(workdir));
        int value = fc.showOpenDialog(this);
        if (value == JFileChooser.APPROVE_OPTION) {
            File dir = fc.getSelectedFile();
            pathTextField.setText(dir.getPath());
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private SimpleDateFormat dateFormat;

    private String formatFilename(String filename) {
        // Remove Path Seperator at beginning of filename
        char firstChar = filename.charAt(0);
        if (firstChar == '/' || firstChar == '\\') {
            filename = filename.replaceFirst(""+firstChar, "");
        }

        Date date = new Date();
        dateFormat = new SimpleDateFormat();
        int sml = filename.indexOf('<'), grt = filename.indexOf('>');
        while (sml != -1 && grt != -1){
            String parsePattern = filename.substring(sml+1, grt);
            dateFormat.applyPattern(parsePattern);
            String formatted = dateFormat.format(date);
            filename = filename.replaceAll("<"+parsePattern+">", formatted);
            sml = filename.indexOf('<');
            grt = filename.indexOf('>');
        }

        return filename;
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ConnectToServerDialog dialog = new ConnectToServerDialog(new MoteTrackApp(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abortButton;
    private javax.swing.JButton addButton;
    private javax.swing.JButton browseButton;
    private javax.swing.JButton connectButton;
    private javax.swing.JLabel filenameLabel;
    private javax.swing.JTextField filenameTextField;
    private javax.swing.JLabel idLabel;
    private javax.swing.JCheckBox logCheckBox;
    private javax.swing.JCheckBox normalizeCheckBox;
    private javax.swing.JLabel pathLabel;
    private javax.swing.JTextField pathTextField;
    private javax.swing.JButton removeButton;
    private javax.swing.JLabel replayLogLabel;
    private javax.swing.JTextField serverAddressTextField;
    private javax.swing.JList tagIdList;
    private javax.swing.JScrollPane tagIdListScrollPane;
    private javax.swing.JTextField tagIdTextField;
    // End of variables declaration//GEN-END:variables

}
